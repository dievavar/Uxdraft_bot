from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from bot.prototype_generator import PROMPT_TEMPLATES, generate_prototype
from bot.states import UXForm
import asyncio
from aiogram.types import FSInputFile
from config import SERVER_URL, OUTPUT_DIR
import os


router = Router()
# –¢–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–∞
PROJECTS_MAP = {
    "proj_website": "–°–∞–π—Ç",
    "proj_shop": "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω",
    "proj_mobile": "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
    "proj_saas": "SaaS / –û–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å",
    "proj_crm": "CRM / ERP",
    "proj_edu": "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"
}

# –ê—É–¥–∏—Ç–æ—Ä–∏—è
AUDIENCE_MAP = {
    "aud_teens": "–ü–æ–¥—Ä–æ—Å—Ç–∫–∏ (12‚Äì18)",
    "aud_youth": "–ú–æ–ª–æ–¥—ë–∂—å (18‚Äì25)",
    "aud_families": "–ú–æ–ª–æ–¥—ã–µ —Å–µ–º—å–∏ (25‚Äì40)",
    "aud_business": "–ë–∏–∑–Ω–µ—Å",
    "aud_seniors": "–°—Ç–∞—Ä—à–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ (50+)"
}

# –§—É–Ω–∫—Ü–∏–∏
FUNCTIONS_MAP = {
    "func_auth": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
    "func_catalog": "–ö–∞—Ç–∞–ª–æ–≥",
    "func_cart": "–ö–æ—Ä–∑–∏–Ω–∞",
    "func_form": "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
    "func_search": "–ü–æ–∏—Å–∫",
    "func_payment": "–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞"
}

# –°—Ç–∏–ª—å
STYLE_MAP = {
    "style_minimal": "–ú–∏–Ω–∏–º–∞–ª–∏–∑–º",
    "style_business": "–ë–∏–∑–Ω–µ—Å",
    "style_bright": "–Ø—Ä–∫–∏–π",
    "style_dark": "–¢—ë–º–Ω–∞—è —Ç–µ–º–∞",
    "style_modern": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π UI"
}


# ---------- –°—Ç–∞—Ä—Ç ----------
@router.message(F.text == "/start")
async def start_form(message: Message, state: FSMContext):
    photo = FSInputFile("assets/4.png")
    text = (
        "–ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å **UX-–ø—Ä–æ—Ç–æ—Ç–∏–ø** ‚Äî –±—ã—Å—Ç—Ä—ã–π –∏ –Ω–∞–≥–ª—è–¥–Ω—ã–π –º–∞–∫–µ—Ç –±—É–¥—É—â–µ–≥–æ —Å–∞–π—Ç–∞ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n\n"
        "–ß—Ç–æ —ç—Ç–æ –¥–∞—ë—Ç:\n"
        "‚Äî –ü—Ä–æ–≤–µ—Ä–∏—à—å –∏–¥–µ—é –±–µ–∑ –¥–æ–ª–≥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n"
        "‚Äî –ü–æ–π–º—ë—à—å, –∫–∞–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–º –±—É–¥—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ –ª—é–¥–∏\n"
        "‚Äî –°–º–æ–∂–µ—à—å –ø–æ–∫–∞–∑–∞—Ç—å –¥–∏–∑–∞–π–Ω –∫–æ–ª–ª–µ–≥–∞–º –∏–ª–∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞–º\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏ –ø—Ä–æ–µ–∫—Ç, –≤—ã–±–µ—Ä–∏ –∞—É–¥–∏—Ç–æ—Ä–∏—é, —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Å—Ç–∏–ª—å ‚Äî –∏ –ø–æ–ª—É—á–∏—à—å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ—Ç–∏–ø!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç\n"
        "/help ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º\n"
        "/brief ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±—Ä–∏—Ñ\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "/about ‚Äî –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ\n\n"
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:"
    )

    await message.answer_photo(photo=photo, caption=text, parse_mode="Markdown")

    await message.answer(
        "–°–µ–π—á–∞—Å —è –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å –±—Ä–∏—Ñ.\n"
        "–ü–æ –Ω–µ–º—É –º—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ—Ç–∏–ø."
    )

    photo2 = FSInputFile("assets/2.png")
    await message.answer_photo(
        photo2,
        caption="–í–æ—Ç –ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –º–æ–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å üëÜ\n\n"
                "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤—Ä—É—á–Ω—É—é."
    )

    await state.set_state(UXForm.business_type)
    await ask_projects(message, state)

# ---------- –í–æ–ø—Ä–æ—Å 1: –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ ----------
async def ask_projects(target, state: FSMContext):
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å—Ç—Ä–æ–∏–º –∫–Ω–æ–ø–∫–∏ –∏–∑ prompts.yaml
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=key, callback_data=f"proj_{i}")]
        for i, key in enumerate(PROMPT_TEMPLATES.keys())
    ])

    await target.answer(
        "–í—ã–±–µ—Ä–∏ *—Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞* –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=kb,
        parse_mode="Markdown"
    )
    await state.set_state(UXForm.business_type)


@router.callback_query(UXForm.business_type, F.data.startswith("proj_"))
async def process_business_type_cb(callback: CallbackQuery, state: FSMContext):
    index = int(callback.data.replace("proj_", ""))
    project_type = list(PROMPT_TEMPLATES.keys())[index]  # –±–µ—Ä—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ YAML
    await state.update_data(business_type=project_type)
    await ask_audience(callback.message, state)


@router.message(UXForm.business_type)
async def process_business_type_msg(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–ª –≤—Ä—É—á–Ω—É—é ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    await state.update_data(business_type=message.text)
    await ask_audience(message, state)
# ---------- –í–æ–ø—Ä–æ—Å 2: –ê—É–¥–∏—Ç–æ—Ä–∏—è ----------
async def ask_audience(target, state: FSMContext):

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ—Å—Ç–∫–∏ (12‚Äì18)", callback_data="aud_teens")],
        [InlineKeyboardButton(text="–ú–æ–ª–æ–¥—ë–∂—å (18‚Äì25)", callback_data="aud_youth")],
        [InlineKeyboardButton(text="–ú–æ–ª–æ–¥—ã–µ —Å–µ–º—å–∏ (25‚Äì40)", callback_data="aud_families")],
        [InlineKeyboardButton(text="–°—Ç–∞—Ä—à–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ (50+)", callback_data="aud_seniors")],
        [InlineKeyboardButton(text="–ë–∏–∑–Ω–µ—Å", callback_data="aud_business")]
    ])
    await target.answer("–ö—Ç–æ *–æ—Å–Ω–æ–≤–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è*?\n\n–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=kb, parse_mode="Markdown")
    await state.set_state(UXForm.audience)



@router.callback_query(UXForm.audience, F.data.startswith("aud_"))
async def process_audience_cb(callback: CallbackQuery, state: FSMContext):
    value = AUDIENCE_MAP.get(callback.data, callback.data)
    await state.update_data(audience=value)
    await ask_functions(callback.message, state)

@router.message(UXForm.audience)
async def process_audience_msg(message: Message, state: FSMContext):
    await state.update_data(audience=message.text)
    await ask_functions(message, state)

# ---------- –í–æ–ø—Ä–æ—Å 3: –§—É–Ω–∫—Ü–∏–∏ ----------
async def ask_functions(target, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data="func_auth")],
        [InlineKeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥", callback_data="func_catalog")],
        [InlineKeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞", callback_data="func_cart")],
        [InlineKeyboardButton(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="func_form")],
        [InlineKeyboardButton(text="–ü–æ–∏—Å–∫", callback_data="func_search")],
        [InlineKeyboardButton(text="–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞", callback_data="func_payment")]
    ])

    await target.answer(
        "–ö–∞–∫–∏–µ *—Ñ—É–Ω–∫—Ü–∏–∏* –Ω—É–∂–Ω—ã?\n\n"
        "–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–∫—Å—Ç–æ–º:",
        reply_markup=kb, parse_mode="Markdown"
    )
    await state.set_state(UXForm.functions)


# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ----------
@router.callback_query(UXForm.functions, F.data.startswith("func_"))
async def process_functions_cb(callback: CallbackQuery, state: FSMContext):
    value = FUNCTIONS_MAP.get(callback.data, callback.data)
    await state.update_data(functions=value)
    await ask_style(callback.message, state)



# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ ----------
@router.message(UXForm.functions)
async def process_functions_msg(message: Message, state: FSMContext):
    await state.update_data(functions=message.text)
    await ask_style(message, state)


# ---------- –í–æ–ø—Ä–æ—Å 4: –°—Ç–∏–ª—å ----------
async def ask_style(target, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–∏–Ω–∏–º–∞–ª–∏–∑–º", callback_data="style_minimal")],
        [InlineKeyboardButton(text="–ë–∏–∑–Ω–µ—Å", callback_data="style_business")],
        [InlineKeyboardButton(text="–Ø—Ä–∫–∏–π", callback_data="style_bright")],
        [InlineKeyboardButton(text="–¢—ë–º–Ω–∞—è —Ç–µ–º–∞", callback_data="style_dark")],
        [InlineKeyboardButton(text="–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π UI", callback_data="style_modern")]
    ])
    await target.answer("–ö–∞–∫–æ–π *—Å—Ç–∏–ª—å* –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å?\n\n–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=kb, parse_mode="Markdown")
    await state.set_state(UXForm.style)

@router.callback_query(UXForm.style, F.data.startswith("style_"))
async def process_style_cb(callback: CallbackQuery, state: FSMContext):
    value = STYLE_MAP.get(callback.data, callback.data)
    await state.update_data(style=value)
    await show_summary(callback.message, state)


@router.message(UXForm.style)
async def process_style_msg(message: Message, state: FSMContext):
    await state.update_data(style=message.text)
    await show_summary(message, state)

# ---------- –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±–∑–æ—Ä ----------
async def show_summary(target, state: FSMContext):
    data = await state.get_data()

    def normalize(value) -> str:
        """–ü—Ä–∏–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        if not value:
            return "‚Äî"
        if isinstance(value, list):
            return ", ".join(map(str, value))
        return str(value)

    projects = normalize(data.get("business_type"))
    audience = normalize(data.get("audience"))
    functions = normalize(data.get("functions"))
    styles = normalize(data.get("style"))

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞", callback_data="edit_business")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é", callback_data="edit_audience")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏", callback_data="edit_functions")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å", callback_data="edit_style")],
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å!", callback_data="confirm")]
    ])

    await target.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç —á—Ç–æ —è –ø–æ–Ω—è–ª –∏–∑ —Ç–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:\n\n"
        f"*–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞*: {projects}\n"
        f"*–ê—É–¥–∏—Ç–æ—Ä–∏—è*: {audience}\n"
        f"*–§—É–Ω–∫—Ü–∏–∏*: {functions}\n"
        f"*–°—Ç–∏–ª—å*: {styles}\n\n"
        "–•–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?",
        reply_markup=kb, parse_mode="Markdown"
    )
    await state.set_state(UXForm.confirm)

async def get_brief(state: FSMContext) -> dict:
    data = await state.get_data()
    return {
        "project": data.get("business_type", "‚Äî"),
        "audience": data.get("audience", "‚Äî"),
        "functions": data.get("functions", []),
        "style": data.get("style", "‚Äî")
    }

from deep_translator import GoogleTranslator

def translate_text(text: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞"""
    if not text:
        return ""
    try:
        return GoogleTranslator(source="auto", target="en").translate(text)
    except Exception:
        return text  # –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å


@router.message(F.text == "/help")
async def help_command(message: Message):
    photo = FSInputFile("assets/3.png")
    caption = (
         "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å UX-–ø—Ä–æ—Ç–æ—Ç–∏–ø.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç\n"
        "/brief ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±—Ä–∏—Ñ\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "/about ‚Äî –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ"
    )
    await message.answer_photo(photo=photo, caption=caption, parse_mode="Markdown")



# ---------- About ----------
@router.message(F.text == "/about")
async def about_command(message: Message):
    photo = FSInputFile("assets/5.png")
    text = (
        "*–û –±–æ—Ç–µ*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ UX-–ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤ ‚Äî "
        "—É–ø—Ä–æ—â—ë–Ω–Ω—ã—Ö –º–∞–∫–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —Å–∞–π—Ç–æ–≤ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.\n\n"
        "*–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ?*\n"
        "‚Äî –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏ –¥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n"
        "‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –∫–æ–ª–ª–µ–≥–∞–º –∏–ª–∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞–º\n"
        "‚Äî –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∏ –∫–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω—ã\n\n"
        "–ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ–±—Ä–∞—Ç—å –±—Ä–∏—Ñ (—Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞, –∞—É–¥–∏—Ç–æ—Ä–∏—è, —Ñ—É–Ω–∫—Ü–∏–∏, —Å—Ç–∏–ª—å), "
        "–∞ –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞—ë—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ç–æ—Ç–∏–ø, –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ —Å—Å—ã–ª–∫–µ.\n\n"
        "    –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã `/start` –∏–ª–∏ `/brief`, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
    )
    await message.answer_photo(photo=photo, caption=text, parse_mode="Markdown")

# ---------- Brief ----------
@router.message(F.text == "/brief")
async def brief_command(message: Message, state: FSMContext):
    photo = FSInputFile("assets/1.png")
    data = await state.get_data()

    def normalize(value):
        if not value:
            return "‚Äî"
        if isinstance(value, list):
            return ", ".join(map(str, value))
        return str(value)

    text = (
        "*–¢–µ–∫—É—â–∏–π –±—Ä–∏—Ñ*\n\n"
        f"–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: {normalize(data.get('business_type'))}\n"
        f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {normalize(data.get('audience'))}\n"
        f"–§—É–Ω–∫—Ü–∏–∏: {normalize(data.get('functions'))}\n"
        f"–°—Ç–∏–ª—å: {normalize(data.get('style'))}\n"
    )

    await message.answer_photo(photo=photo, caption=text, parse_mode="Markdown")


@router.message(F.text == "/cancel")
async def cancel_command(message: Message, state: FSMContext):
    # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    photo = FSInputFile("assets/1.png")
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–º–æ—â—å
    text = (
        "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω—ë–Ω.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
    )
    await message.answer_photo(photo=photo, caption=text, parse_mode="Markdown")

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è ----------

@router.callback_query(UXForm.confirm)
async def edit_choice(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    if callback.data == "edit_business":
        await callback.message.answer("–û–∫–µ–π, –¥–∞–≤–∞–π —É—Ç–æ—á–Ω–∏–º —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:")
        await ask_projects(callback.message, state)
        await state.set_state(UXForm.business_type)
        return

    if callback.data == "edit_audience":
        await callback.message.answer("–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π —É—Ç–æ—á–Ω–∏–º –∞—É–¥–∏—Ç–æ—Ä–∏—é:")
        await ask_audience(callback.message, state)
        await state.set_state(UXForm.audience)
        return

    if callback.data == "edit_functions":
        await callback.message.answer("–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π —É—Ç–æ—á–Ω–∏–º —Ñ—É–Ω–∫—Ü–∏–∏:")
        await ask_functions(callback.message, state)
        await state.set_state(UXForm.functions)
        return

    if callback.data == "edit_style":
        await callback.message.answer("–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π —É—Ç–æ—á–Ω–∏–º —Å—Ç–∏–ª—å:")
        await ask_style(callback.message, state)
        await state.set_state(UXForm.style)
        return

    elif callback.data == "confirm":
        data = await state.get_data()

        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω–∞—á–∞–ª–∞—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        await callback.message.answer(
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ..."
        )

        brief = {
            "project": data.get("business_type"),
            "audience": data.get("audience"),
            "functions": data.get("functions", []),
            "style": data.get("style")
        }

        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            from bot.prototype_generator import generate_prototype
            result = await asyncio.to_thread(generate_prototype, brief)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç
            from aiogram.types import FSInputFile
            caption = (
                "–ü—Ä–æ—Ç–æ—Ç–∏–ø —Å–æ–∑–¥–∞–Ω! –ú–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.\n\n"
                f"[–û—Ç–∫—Ä—ã—Ç—å HTML –æ–Ω–ª–∞–π–Ω]({result['html_link']})\n\n"
                "–¢–∞–∫–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω —Å–∞–º HTML-—Ñ–∞–π–ª –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è."
            )

            if result.get("png_path") and os.path.exists(result["png_path"]):
                screenshot = FSInputFile(result["png_path"])
                await callback.message.answer_photo(
                    screenshot,
                    caption=caption,
                    parse_mode="Markdown"
                )
            else:
                # –µ—Å–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–µ—Ç
                await callback.message.answer(
                    "–ü—Ä–æ—Ç–æ—Ç–∏–ø —Å–æ–∑–¥–∞–Ω, –Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.\n\n" + caption,
                    parse_mode="Markdown"
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º HTML-—Ñ–∞–π–ª
            html_file = FSInputFile(result["html_path"])
            await callback.message.answer_document(html_file)

        except Exception as e:
            await callback.message.answer(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

        finally:
            await state.clear()
